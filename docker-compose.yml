services:
  # MinIO - Object Storage for Raw Data (Bronze Layer)
  minio:
    image: minio/minio:latest
    container_name: pika_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - pika_network

  # PostgreSQL - Metadata and Configuration Storage
  postgres:
    image: postgres:15
    container_name: pika_postgres
    environment:
      POSTGRES_DB: pikadb
      POSTGRES_USER: pika_user
      POSTGRES_PASSWORD: pika_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    networks:
      - pika_network

  # Qdrant - Vector Database (Gold Layer)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: pika_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - pika_network

  # Redis - Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: pika_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pika_network

  # Apache Airflow - Database Initialization
  airflow-init:
    image: apache/airflow:2.7.3
    container_name: pika_airflow_init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://pika_user:pika_pass@postgres:5432/pikadb
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _PIP_ADDITIONAL_REQUIREMENTS: 'python-docx pillow qdrant-client minio'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "
    depends_on:
      - postgres
    networks:
      - pika_network

  # Apache Airflow - Data Processing Orchestration
  airflow-webserver:
    image: apache/airflow:2.7.3
    container_name: pika_airflow_webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://pika_user:pika_pass@postgres:5432/pikadb
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: 'python-docx pillow qdrant-client minio'
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    command: webserver
    depends_on:
      - postgres
      - airflow-init
    networks:
      - pika_network

  airflow-scheduler:
    image: apache/airflow:2.7.3
    container_name: pika_airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://pika_user:pika_pass@postgres:5432/pikadb
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _PIP_ADDITIONAL_REQUIREMENTS: 'python-docx pillow qdrant-client minio'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    command: scheduler
    depends_on:
      - postgres
      - airflow-init
    networks:
      - pika_network

  # Data Processing Service - Bronze to Silver Layer
  data-processor:
    build:
      context: ./services/data_processor
      dockerfile: Dockerfile
    container_name: pika_data_processor
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: password123
      POSTGRES_HOST: postgres
      POSTGRES_DB: pikadb
      POSTGRES_USER: pika_user
      POSTGRES_PASSWORD: pika_pass
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
    volumes:
      - ./data:/app/data
      - ./services/data_processor:/app # Mount entire service folder
      - ./services/data_processor/scripts:/app/scripts # Mount scripts folder
    depends_on:
      - minio
      - postgres
      - qdrant
    networks:
      - pika_network

  # Embedding Service - Silver to Gold Layer
  embedding-service:
    build:
      context: ./services/embedding_service
      dockerfile: Dockerfile
    container_name: pika_embedding_service
    environment:
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      POSTGRES_HOST: postgres
      POSTGRES_DB: pikadb
      POSTGRES_USER: pika_user
      POSTGRES_PASSWORD: pika_pass
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8001:8001"
    volumes:
      - ./models:/app/models # Mount models folder
      - ./services/embedding_service:/app # Mount entire service folder
      - ./services/embedding_service/scripts:/app/scripts # Mount scripts folder
      - ./services/rag_engine/scripts:/app/rag_scripts # Mount RAG engine scripts
      - ./cache:/root/.cache # Mount cache folder for model persistence
    depends_on:
      - qdrant
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    networks:
      - pika_network

  # Chatbot API Service
  chatbot-api:
    build:
      context: ./services/chatbot_api
      dockerfile: Dockerfile
    container_name: pika_chatbot_api
    environment:
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      REDIS_HOST: redis
      REDIS_PORT: 6379
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      POSTGRES_HOST: postgres
      POSTGRES_DB: pikadb
      POSTGRES_USER: pika_user
      POSTGRES_PASSWORD: pika_pass
    ports:
      - "8000:8000"
    volumes:
      - ./services/chatbot_api:/app # Mount entire service folder
      - ./scripts:/app/scripts # Mount scripts folder
    depends_on:
      - qdrant
      - redis
      - postgres
    networks:
      - pika_network

  # Web UI for Chatbot
  chatbot-ui:
    build:
      context: ./services/chatbot_ui
      dockerfile: Dockerfile
    container_name: pika_chatbot_ui
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    volumes:
      - ./services/chatbot_ui/src:/app/src # Mount src folder for hot reload
      - ./services/chatbot_ui/public:/app/public # Mount public folder
    depends_on:
      - chatbot-api
    networks:
      - pika_network

  # Adminer - PostgreSQL Web UI
  adminer:
    image: adminer:latest
    container_name: pika_adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - pika_network

volumes:
  minio_data:
  postgres_data:
  qdrant_data:
  redis_data:


networks:
  pika_network:
    driver: bridge
